package com.company;

/**
 * This class constructs the deck shoe and deals cards
 */
public class CardDeck extends Game {

    private final static String[] suits = {"Spades", "Clubs", "Diamonds", "Hearts"};
    private final static String[] names = {"Ace","2","3","4","5","6","7","8","9","10","Jack","Queen","King"};
    private static String deck[];
    private final static int total = names.length * suits.length * 8; //52*8 cards in an 8 deck shoe
    private static int[] deckValues;
    private int deckIndex = 0, suitIndex = 0;
    private final static int SHOE_SIZE = 8;
    private final static int BIGGEST_VALUE = 10;


    public static void createDeck() {
        deckValues = new int[total];
        int counter = 0, counter2 = 0;
        deck = new String[total];
        for (int x = 0; x < SHOE_SIZE; x++) {
            for (int i = 0; i < suits.length; i++) {
                for (int j = 0; j < names.length; j++) {
                    deck[counter] = names[j] + " of " + suits[i];
                    counter++;
                }
            }
        }
        for (int x = 0; x < 8; x++) {
            for (int suit = 0; suit < suits.length; suit++) {
                for (int number = 1; number < names.length + 1; number++) {
                    deckValues[counter2] = number;
                    if (number > BIGGEST_VALUE) {
                        deckValues[counter2] = BIGGEST_VALUE;
                    }
                    counter2++;
                }
            }
        }
    }

    /**
     * The shuffle() method uses a random integer generated by Math.random() to indicate an index in which the
     * first card will move to. This repeats 13 * 4 * 8 times for the 8 deck shoe. Since the deckValues and the deck
     * are shuffled the exact same way, this ensures the numerical values line up with the String deck.
     */

    public void shuffle(){
        for (int i = 0; i < total; i++){
            int rng = i + (int) (Math.random()*(total - i));
            String x = deck[rng];
            deck[rng] = deck[i];
            deck[i] = x;
            int y = deckValues[i];
            deckValues[i] = deckValues[rng];
            deckValues[rng] = y;
        }
        deckIndex = 0;
        suitIndex = 0;
    }

    /**
     * The next two methods dealCard() and dealSuit() are used to give the numerical value of the card and
     * the String of a card (e.g. six of diamonds) to the arrayLists holding numbers and the actual cards respectively.
     * @return the dealt card
     */

    public int dealInt() {
        deckIndex++;
        return deckValues[deckIndex - 1];
    }
    public String dealString() {
        suitIndex++;
        return deck[suitIndex - 1];
    }
}

